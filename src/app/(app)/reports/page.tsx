
"use client";

import { useState } from "react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardHeader, CardTitle, CardFooter } from "@/components/ui/card";
import { FileText, PlusCircle, Share2, Download, HeartPulse, Pill, BarChart3 } from "lucide-react";
import { useToast } from "@/hooks/use-toast";
import { Separator } from "@/components/ui/separator";
import {
  LineChart,
  Line,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip,
  Legend,
} from "recharts";
import {
  ChartContainer,
  ChartConfig,
  ChartTooltip,
  ChartTooltipContent,
  ChartLegend,
  ChartLegendContent,
} from "@/components/ui/chart";


// Data point types for charts
type HeartRateDataPoint = {
  date: string; // e.g., "Day 1", "Jul 1"
  bpm: number;
};

type BloodPressureDataPoint = {
  date: string;
  systolic: number;
  diastolic: number;
};


// A more comprehensive report type with chart data
type Report = {
  id: number;
  date: string;
  type: string;
  summary: string;
  vitals: {
    avgHeartRate: number;
    avgBP: string;
  };
  heartRateData: HeartRateDataPoint[];
  bloodPressureData: BloodPressureDataPoint[];
  medications: string[];
};

// Initial reports with more detailed, realistic data
const initialReports: Report[] = [
    { 
        id: 1, 
        date: "2024-07-01", 
        type: "Monthly Vitals Summary",
        summary: "Overall stable month with consistent vitals. Medication adherence was excellent.",
        vitals: {
            avgHeartRate: 75,
            avgBP: "122/81"
        },
        heartRateData: [
            { date: "Week 1", bpm: 76 }, { date: "Week 2", bpm: 74 }, { date: "Week 3", bpm: 75 }, { date: "Week 4", bpm: 75 },
        ],
        bloodPressureData: [
            { date: "Week 1", systolic: 121, diastolic: 80 }, { date: "Week 2", systolic: 124, diastolic: 82 }, { date: "Week 3", systolic: 122, diastolic: 81 }, { date: "Week 4", systolic: 120, diastolic: 80 },
        ],
        medications: ["Aspirin 81mg", "Lisinopril 10mg"]
    },
    { 
        id: 2, 
        date: "2024-06-01", 
        type: "Monthly Vitals Summary",
        summary: "Slight increase in average heart rate noted. Blood pressure remains within the target range.",
        vitals: {
            avgHeartRate: 81,
            avgBP: "125/83"
        },
        heartRateData: [
             { date: "Week 1", bpm: 80 }, { date: "Week 2", bpm: 82 }, { date: "Week 3", bpm: 83 }, { date: "Week 4", bpm: 79 },
        ],
        bloodPressureData: [
            { date: "Week 1", systolic: 125, diastolic: 84 }, { date: "Week 2", systolic: 126, diastolic: 82 }, { date: "Week 3", systolic: 124, diastolic: 83 }, { date: "Week 4", systolic: 125, diastolic: 82 },
        ],
        medications: ["Aspirin 81mg", "Lisinopril 10mg", "Metformin 500mg"]
    },
];

const hrChartConfig = {
  bpm: {
    label: "BPM",
    color: "hsl(var(--chart-1))",
  },
} satisfies ChartConfig;

const bpChartConfig = {
  systolic: {
    label: "Systolic",
    color: "hsl(var(--chart-1))",
  },
  diastolic: {
    label: "Diastolic",
    color: "hsl(var(--chart-2))",
  },
} satisfies ChartConfig;


// Function to format the report data into a string for download or sharing
const formatReportForDownload = (report: Report): string => {
  const hrHistory = report.heartRateData;
  const bpHistory = report.bloodPressureData;
  
  const hrHigh = Math.max(...hrHistory.map(d => d.bpm));
  const hrLow = Math.min(...hrHistory.map(d => d.bpm));

  const bpSysHigh = Math.max(...bpHistory.map(d => d.systolic));
  const bpSysLow = Math.min(...bpHistory.map(d => d.systolic));
  const bpDiaHigh = Math.max(...bpHistory.map(d => d.diastolic));
  const bpDiaLow = Math.min(...bpHistory.map(d => d.diastolic));

  return `
Health Report - Vitalis App
============================
Date Generated: ${new Date(report.date).toLocaleDateString()}
Report Type: ${report.type}

Summary
-------
${report.summary}

Vitals Overview
---------------
- Average Heart Rate: ${report.vitals.avgHeartRate} BPM (High: ${hrHigh}, Low: ${hrLow})
- Average Blood Pressure: ${report.vitals.avgBP} (SYS/DIA)
- BP Range (High/Low): ${bpSysHigh}/${bpDiaHigh} | ${bpSysLow}/${bpDiaLow} (SYS/DIA)


Medications
-----------
${report.medications.map(med => `- ${med}`).join("\n")}

----------------------------
Generated by Vitalis - Your Health Companion. This is not a medical document. Always consult with your doctor.
  `.trim();
};


export default function ReportsPage() {
  const [reports, setReports] = useState<Report[]>(initialReports);
  const { toast } = useToast();

  // Function to generate a new report with placeholder data
  const generateReport = (period: 'Daily' | 'Weekly' | 'Monthly') => {
    let heartRateData: HeartRateDataPoint[];
    let bloodPressureData: BloodPressureDataPoint[];
    let summary: string;
    let type: string;
    const today = new Date();

    switch (period) {
      case 'Daily':
        type = `Daily Vitals Summary`;
        summary = "This report shows sample vital readings taken throughout a single day.";
        heartRateData = Array.from({ length: 8 }, (_, i) => ({
          date: `${8 + i * 2}:00`,
          bpm: Math.floor(Math.random() * (85 - 65 + 1) + 65),
        }));
        bloodPressureData = Array.from({ length: 8 }, (_, i) => ({
          date: `${8 + i * 2}:00`,
          systolic: Math.floor(Math.random() * (130 - 115 + 1) + 115),
          diastolic: Math.floor(Math.random() * (85 - 75 + 1) + 75),
        }));
        break;
      case 'Weekly':
        type = `Weekly Vitals Summary`;
        summary = "This report shows sample daily average vitals over the course of one week.";
        const weekdays = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"];
        heartRateData = Array.from({ length: 7 }, (_, i) => ({
          date: weekdays[(today.getDay() - 6 + i + 7) % 7],
          bpm: Math.floor(Math.random() * (90 - 60 + 1) + 60),
        }));
        bloodPressureData = Array.from({ length: 7 }, (_, i) => ({
          date: weekdays[(today.getDay() - 6 + i + 7) % 7],
          systolic: Math.floor(Math.random() * (135 - 110 + 1) + 110),
          diastolic: Math.floor(Math.random() * (90 - 70 + 1) + 70),
        }));
        break;
      case 'Monthly':
      default:
        type = `Monthly Vitals Summary`;
        summary = "This report shows sample weekly average vitals over the course of one month.";
        heartRateData = Array.from({ length: 4 }, (_, i) => ({
          date: `Week ${i + 1}`,
          bpm: Math.floor(Math.random() * (85 - 65 + 1) + 65),
        }));
        bloodPressureData = Array.from({ length: 4 }, (_, i) => ({
          date: `Week ${i + 1}`,
          systolic: Math.floor(Math.random() * (130 - 115 + 1) + 115),
          diastolic: Math.floor(Math.random() * (85 - 75 + 1) + 75),
        }));
        break;
    }

    const newReport: Report = {
      id: Date.now(),
      date: new Date().toISOString().split('T')[0],
      type,
      summary,
      vitals: {
        avgHeartRate: Math.floor(heartRateData.reduce((acc, cur) => acc + cur.bpm, 0) / heartRateData.length),
        avgBP: `${Math.floor(bloodPressureData.reduce((acc, cur) => acc + cur.systolic, 0) / bloodPressureData.length)}/${Math.floor(bloodPressureData.reduce((acc, cur) => acc + cur.diastolic, 0) / bloodPressureData.length)}`
      },
      heartRateData,
      bloodPressureData,
      medications: ["Aspirin 81mg", "Lisinopril 10mg"]
    };
    setReports([newReport, ...reports]);
    toast({
      title: "Report Generated",
      description: `Your new ${period.toLowerCase()} health report is ready.`,
    });
  };

  // Function to handle the download functionality
  const handleDownload = (report: Report) => {
    const reportText = formatReportForDownload(report);
    const blob = new Blob([reportText], { type: "text/plain;charset=utf-8" });
    const url = URL.createObjectURL(blob);
    const link = document.createElement("a");
    link.href = url;
    link.download = `Vitalis-Report-${report.date}.txt`;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    URL.revokeObjectURL(url);
    toast({
        title: "Download Started",
        description: `Your report is being downloaded as ${link.download}.`,
    });
  };

  // Function to handle sharing using the Web Share API, with a clipboard fallback
  const handleShare = async (report: Report) => {
    const reportText = formatReportForDownload(report);
    const shareData = {
        title: `Health Report - ${report.date}`,
        text: reportText,
    };
    
    if (navigator.share && navigator.canShare(shareData)) {
        try {
            await navigator.share(shareData);
             toast({
                title: "Report Shared",
                description: "Your health report has been shared successfully.",
            });
        } catch (error) {
            console.error("Sharing failed:", error);
            toast({
                variant: "destructive",
                title: "Sharing Failed",
                description: "There was an error trying to share your report.",
            });
        }
    } else {
        // Fallback to copying to clipboard
        try {
            await navigator.clipboard.writeText(reportText);
            toast({
                title: "Copied to Clipboard",
                description: "Report content has been copied to your clipboard.",
            });
        } catch (error) {
             console.error("Copying failed:", error);
             toast({
                variant: "destructive",
                title: "Copying Failed",
                description: "Could not copy report to clipboard.",
            });
        }
    }
  }

  return (
    <div className="flex flex-col gap-8 animate-in fade-in-50">
      <div className="flex items-center gap-4">
        <FileText className="h-8 w-8 text-primary" />
        <h1 className="font-headline text-3xl font-bold">Health Reports</h1>
      </div>
      
      <Card>
        <CardHeader>
          <CardTitle className="font-headline">Generate a New Report</CardTitle>
          <CardDescription>Create a shareable summary of your health data. Choose a time period below to generate a new report.</CardDescription>
        </CardHeader>
        <CardContent className="flex flex-wrap gap-4">
          <Button onClick={() => generateReport('Daily')}>
            <PlusCircle className="mr-2 h-4 w-4" />
            Generate Daily Report
          </Button>
          <Button onClick={() => generateReport('Weekly')} variant="secondary">
            <PlusCircle className="mr-2 h-4 w-4" />
            Generate Weekly Report
          </Button>
          <Button onClick={() => generateReport('Monthly')} variant="secondary">
            <PlusCircle className="mr-2 h-4 w-4" />
            Generate Monthly Report
          </Button>
        </CardContent>
      </Card>
      
      <div className="space-y-6">
        <h2 className="font-headline text-2xl font-bold">Your Generated Reports</h2>
         {reports.length > 0 ? (
          reports.map((report) => (
            <Card key={report.id} className="overflow-hidden">
              <CardHeader>
                <CardTitle className="font-headline flex justify-between items-start">
                  <span>{report.type}</span>
                  <span className="text-sm font-normal text-muted-foreground">{new Date(report.date).toLocaleDateString()}</span>
                </CardTitle>
                <CardDescription>{report.summary}</CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                 <Separator />
                 <div className="grid md:grid-cols-2 gap-4 text-sm">
                    <div className="space-y-2">
                        <h4 className="font-semibold flex items-center gap-2"><HeartPulse className="h-4 w-4 text-primary"/> Vitals Summary</h4>
                        <p className="text-muted-foreground">Avg. Heart Rate: <span className="font-medium text-foreground">{report.vitals.avgHeartRate} BPM</span></p>
                        <p className="text-muted-foreground">Avg. Blood Pressure: <span className="font-medium text-foreground">{report.vitals.avgBP}</span></p>
                    </div>
                     <div className="space-y-2">
                        <h4 className="font-semibold flex items-center gap-2"><Pill className="h-4 w-4 text-primary"/> Medications</h4>
                        <ul className="list-disc pl-5 text-muted-foreground">
                            {report.medications.map((med, i) => <li key={i}>{med}</li>)}
                        </ul>
                    </div>
                 </div>
                 <Separator />
                 <div className="space-y-4">
                    <h4 className="font-semibold flex items-center gap-2"><BarChart3 className="h-4 w-4 text-primary"/> Visual Trends</h4>
                    
                    <div className="space-y-2">
                      <p className="text-sm font-medium">Heart Rate Trend (BPM)</p>
                      <ChartContainer config={hrChartConfig} className="h-[200px] w-full">
                        <LineChart accessibilityLayer data={report.heartRateData} margin={{ top: 10, right: 10, left: -20, bottom: 0 }}>
                          <CartesianGrid vertical={false} />
                          <XAxis dataKey="date" tickLine={false} axisLine={false} tickMargin={8} />
                          <YAxis domain={['dataMin - 5', 'dataMax + 5']} tickLine={false} axisLine={false} tickMargin={8} />
                          <ChartTooltip cursor={false} content={<ChartTooltipContent indicator="dot" />} />
                          <Line dataKey="bpm" type="natural" stroke="var(--color-bpm)" strokeWidth={2} dot={false} />
                        </LineChart>
                      </ChartContainer>
                    </div>

                    <div className="space-y-2">
                       <p className="text-sm font-medium">Blood Pressure Trend (mmHg)</p>
                       <ChartContainer config={bpChartConfig} className="h-[200px] w-full">
                          <LineChart accessibilityLayer data={report.bloodPressureData} margin={{ top: 10, right: 10, left: -20, bottom: 0 }}>
                            <CartesianGrid vertical={false} />
                             <XAxis dataKey="date" tickLine={false} axisLine={false} tickMargin={8} />
                            <YAxis domain={['dataMin - 10', 'dataMax + 10']} tickLine={false} axisLine={false} tickMargin={8} />
                            <ChartTooltip cursor={false} content={<ChartTooltipContent indicator="dot" />} />
                            <ChartLegend content={<ChartLegendContent />} />
                            <Line dataKey="systolic" type="natural" stroke="var(--color-systolic)" strokeWidth={2} dot={false} />
                            <Line dataKey="diastolic" type="natural" stroke="var(--color-diastolic)" strokeWidth={2} dot={false} />
                          </LineChart>
                        </ChartContainer>
                    </div>

                 </div>
              </CardContent>
              <CardFooter className="bg-secondary/50 py-3 px-6 justify-end gap-2">
                  <Button variant="outline" onClick={() => handleShare(report)}>
                      <Share2 className="mr-2 h-4 w-4" />
                      Share
                  </Button>
                  <Button onClick={() => handleDownload(report)}>
                      <Download className="mr-2 h-4 w-4" />
                      Download
                  </Button>
              </CardFooter>
            </Card>
          ))
        ) : (
            <Card className="flex flex-col items-center justify-center py-20">
                <CardContent className="text-center">
                    <FileText className="mx-auto h-12 w-12 text-muted-foreground" />
                    <h3 className="mt-4 text-lg font-medium font-headline">No reports yet.</h3>
                    <p className="mt-1 text-sm text-muted-foreground">Generate your first report to get started.</p>
                </CardContent>
            </Card>
        )}
      </div>
    </div>
  );
}
